https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbF8zZ25NS1o3ZUUwQ3dTbXdTZ1ppb20zQ1k3QXxBQ3Jtc0tubndmeEh2c3lENnlCLTk5aTdKbm1KZnJHWFl1bUk3RExRcXVObl96Y280M2JDZzlKRGtfYU85OHRsVUhjVnhxVXZvNWpLQmcwYVExczNVVC1xTE9lbExZcmF2YkFvUTVDa0JYa0h0aWlaUE5qNno1UQ&q=https%3A%2F%2Fdrive.google.com%2Ffile%2Fd%2F1Rw8YPmFp4mDGYbpwVXFelp3t489XsPP0%2Fview%3Fusp%3Dsharing&v=sD8VAW-rL0U
https://drive.google.com/file/d/1Rw8YPmFp4mDGYbpwVXFelp3t489XsPP0/view?pli=1
https://aka.ms/ssmsfullsetup
https://www.youtube.com/watch?v=icXEn3VbO0w&pp=ygUYZmlnbWEgd2ViIGRlc2lnbiBzaW5oYWxh

*#850004173807*854# 3times
*#899
manual test
seensor self-test and calibration
others->database version 7 times -> ReadWrite Important log test-> cancel 3 times

UCSC
suscom future curriers Bridge
elearning.lk
dpuni.org/
agora.org/
coseriea
udemy - digital marketiing/video editing/

SASS DOM Firebase writing* Script/js
frontend dev tools
freecodecamp
ajax

Map image
RawSpan/ColSpan
Col-Group
html block & inline

user stories
agile
softs skills
Learnings

<header> - Defines a header for a document or a section
<nav> - Defines a set of navigation links
<section> - Defines a section in a document
<article> - Defines an independent, self-contained content
<aside> - Defines content aside from the content (like a sidebar)
<footer> - Defines a footer for a document or a section
<details> - Defines additional details that the user can open and close on demand
<summary> - Defines a heading for the <details> element

<code>
x = 5;
y = 6;
z = x + y;
</code>

HTML Computer Codes:
<p>Message from my computer:</p>
<p><samp>File not found.<br>Press F1 to continue</samp></p>

<p>Save the document by pressing <kbd>Ctrl + S</kbd></p>

<p>The area of a triangle is: 1/2 x <var>b</var> x <var>h</var>, where <var>b</var> is the base, and <var>h</var> is the vertical height.</p>

The <kbd> element defines keyboard input
The <samp> element defines sample output from a computer program
The <code> element defines a piece of computer code
The <var> element defines a variable in programming or in a mathematical expression


&entity_name;
OR

&#entity_number;
To display a less than sign (<) we must write: &lt; or &#60;


Tip: The non-breaking hyphen (&#8209;) is used to define a hyphen character (‚Äë) that does not break into a new line.

Another common use of the non-breaking space is to prevent browsers from truncating spaces in HTML pages.

If you write 10 spaces in your text, the browser will remove 9 of them. To add real spaces to your text, you can use the &nbsp; character entity.

Some Useful HTML Character Entities
Result	Description	Entity Name	Entity Number	Try it
non-breaking space	&nbsp;	&#160;	
<	less than	&lt;	&#60;	
>	greater than	&gt;	&#62;	
&	ampersand	&amp;	&#38;	
"	double quotation mark	&quot;	&#34;	
'	single quotation mark (apostrophe)	&apos;	&#39;	
¬¢	cent	&cent;	&#162;	
¬£	pound	&pound;	&#163;	
¬•	yen	&yen;	&#165;	
‚Ç¨	euro	&euro;	&#8364;	
¬©	copyright	&copy;	&#169;	
¬Æ	registered trademark	&reg;	&#174;


üòÑ is 128516
üòç is 128525
üíó is 128151

scheme://prefix.domain:port/path/filename

A break: <br />
A horizontal rule: <hr />



Type	Description
<input type="text">	Displays a single-line text input field
<input type="radio">	Displays a radio button (for selecting one of many choices)
<input type="checkbox">	Displays a checkbox (for selecting zero or more of many choices)
<input type="submit">	Displays a submit button (for submitting the form)
<input type="button">	Displays a clickable button

<input type="button">
<input type="checkbox">
<input type="color">
<input type="date">
<input type="datetime-local">
<input type="email name="email" autocomplete="off">
<input type="file">
<input type="hidden">
<input type="image src="img_submit.gif" alt="Submit" width="48" height="48" 
<input type="month">
<input type="number id="quantity" name="quantity" min="1" max="5">
<input type="password">
<input type="radio">
<input type="range">
<input type="reset">
<input type="search">
<input type="submit">
<input type="tel">
<input type="text">
<input type="time">
<input type="url">
<input type="week">


 <label for="fname">First name:</label>
 
 _blank	The response is displayed in a new window or tab
_self	The response is displayed in the current window
_parent	The response is displayed in the parent frame
_top	The response is displayed in the full body of the window
framename	The response is displayed in a named iframe


<label for="cars">Choose a car:</label>
<select id="cars" name="cars">
  <option value="volvo">Volvo</option>
  <option value="saab">Saab</option>
  <option value="fiat">Fiat</option>
  <option value="audi">Audi</option>
</select>


<label>	Defines a label for an <input> element
<fieldset>	Groups related elements in a form
<legend>	Defines a caption for a <fieldset> element
<select>	Defines a drop-down list
<optgroup>	Defines a group of related options in a drop-down list
<option>	Defines an option in a drop-down list
<datalist>	Specifies a list of pre-defined options for input controls
			<datalist id="browsers">
				<option value="Internet Explorer">
				<option value="Firefox">
				<option value="Chrome">
				<option value="Opera">
				<option value="Safari">
			</datalist>
<output>	Defines the result of a calculation


Input Restrictions
Here is a list of some common input restrictions:

Attribute	Description
checked	Specifies that an input field should be pre-selected when the page loads (for type="checkbox" or type="radio")
disabled	Specifies that an input field should be disabled
max	Specifies the maximum value for an input field
maxlength	Specifies the maximum number of character for an input field
min	Specifies the minimum value for an input field
pattern	Specifies a regular expression to check the input value against
readonly	Specifies that an input field is read only (cannot be changed)
required	Specifies that an input field is required (must be filled out)
size	Specifies the width (in characters) of an input field
step	Specifies the legal number intervals for an input field
value	Specifies the default value for an input field



The placeholder attribute works with the following input types: text, search, url, tel, email, and password.

The input required attribute specifies that an input field must be filled out before submitting the form.

The required attribute works with the following input types: text, search, url, tel, email, password, date pickers, number, checkbox, radio, and file.



Example: if step="3", legal numbers could be -3, 0, 3, 6, etc.

Tip: This attribute can be used together with the max and min attributes to create a range of legal values.

The step attribute works with the following input types: number, range, date, datetime-local, month, time and week



<form action="/action_page_binary.asp" method="post">
  <label for="fname">First name:</label>
  <input type="text" id="fname" name="fname"><br><br>
  <input type="submit" value="Submit">
  <input type="submit" formenctype="multipart/form-data"
  value="Submit as Multipart/form-data">
</form>

HTML Canvas
Resolution dependent
No support for event handlers
Poor text rendering capabilities
You can save the resulting image as .png or .jpg
Well suited for graphic-intensive games


<video>	Defines a video or movie
<source>	Defines multiple media resources for media elements, such as <video> and <audio>
<track>	Defines text tracks in media players


<div style="text-align:center"> 
  <button onclick="playPause()">Play/Pause</button> 
  <button onclick="makeBig()">Big</button>
  <button onclick="makeSmall()">Small</button>
  <button onclick="makeNormal()">Normal</button>
  <br><br>
  <video id="video1" width="420">
    <source src="mov_bbb.mp4" type="video/mp4">
    <source src="mov_bbb.ogg" type="video/ogg">
    Your browser does not support HTML video.
  </video>
</div> 

<script> 
var myVideo = document.getElementById("video1"); 

function playPause() { 
  if (myVideo.paused) 
    myVideo.play(); 
  else 
    myVideo.pause(); 
} 

function makeBig() { 
    myVideo.width = 560; 
} 

function makeSmall() { 
    myVideo.width = 320; 
} 

function makeNormal() { 
    myVideo.width = 420; 
} 
</script> 

<p>Video courtesy of <a href="https://www.bigbuckbunny.org/" target="_blank">Big Buck Bunny</a>.</p>




Meta Tags

<meta charset="UTF-8">

<meta name="keywords" content="HTML, CSS, JavaScript">

<meta name="description" content="Free Web tutorials">

<meta name="author" content="John Doe">

<meta http-equiv="refresh" content="30">

<meta name="viewport" content="width=device-width, initial-scale=1.0">

<base href="https://www.w3schools.com/" target="_blank">

var x = document.getElementsByTagName("META")[0];

content -	Sets or returns the value of the content attribute of a meta element
httpEquiv -	Sets or returns an HTTP header for the information in the content attribute
name -	Sets or returns a name for the information in the content attribute





document.getElementById("myAnchor").accessKey = "w";

<object width="100%" height="500px" data="snippet.html"></object>
<object data="audi.jpeg"></object>

<embed src="audi.jpeg">
<embed width="100%" height="500px" src="snippet.html">

<iframe width="420" height="315"
src="https://www.youtube.com/embed/tgbNymZ7vqY?playlist=tgbNymZ7vqY&autoplay=1&mute=1&loop=1&controls=0">
</iframe>






<script>
var x = document.getElementById("demo");

function getLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(showPosition);
  } else { 
    x.innerHTML = "Geolocation is not supported by this browser.";
  }
}

function showPosition(position) {
  x.innerHTML = "Latitude: " + position.coords.latitude + 
  "<br>Longitude: " + position.coords.longitude;
}
</script>





function showError(error) {
  switch(error.code) {
    case error.PERMISSION_DENIED:
      x.innerHTML = "User denied the request for Geolocation."
      break;
    case error.POSITION_UNAVAILABLE:
      x.innerHTML = "Location information is unavailable."
      break;
    case error.TIMEOUT:
      x.innerHTML = "The request to get user location timed out."
      break;
    case error.UNKNOWN_ERROR:
      x.innerHTML = "An unknown error occurred."
      break;
  }
}




<script>
var x = document.getElementById("demo");
function getLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.watchPosition(showPosition);
  } else {
    x.innerHTML = "Geolocation is not supported by this browser.";
  }
}
function showPosition(position) {
  x.innerHTML = "Latitude: " + position.coords.latitude +
  "<br>Longitude: " + position.coords.longitude;
}
</script>





#div1 {
  width: 350px;
  height: 70px;
  padding: 10px;
  border: 1px solid #aaaaaa;
}
</style>
<script>
function allowDrop(ev) {
  ev.preventDefault();
}

function drag(ev) {
  ev.dataTransfer.setData("text", ev.target.id);
}

function drop(ev) {
  ev.preventDefault();
  var data = ev.dataTransfer.getData("text");
  ev.target.appendChild(document.getElementById(data));
}
</script>
</head>
<body>

<p>Drag the W3Schools image into the rectangle:</p>

<div id="div1" ondrop="drop(event)" ondragover="allowDrop(event)"></div>
<br>
<img id="drag1" src="img_logo.gif" draggable="true" ondragstart="drag(event)" width="336" height="69">







if (typeof(Storage) !== "undefined") {
  // Code for localStorage/sessionStorage.
} else {
  // Sorry! No Web Storage support..
}






		localStorage Object
<div id="result"></div>

<script>
// Check browser support
if (typeof(Storage) !== "undefined") {
  // Store
  localStorage.setItem("lastname", "Smith");
  // Retrieve
  document.getElementById("result").innerHTML = localStorage.getItem("lastname");
} else {
  document.getElementById("result").innerHTML = "Sorry, your browser does not support Web Storage...";
}
</script>

localStorage.lastname = "Smith";
// Retrieve
document.getElementById("result").innerHTML = localStorage.lastname;
localStorage.removeItem("lastname");



if (localStorage.clickcount) {
  localStorage.clickcount = Number(localStorage.clickcount) + 1;
} else {
  localStorage.clickcount = 1;
}
document.getElementById("result").innerHTML = "You have clicked the button " +
localStorage.clickcount + " time(s).";





The sessionStorage Object

if (sessionStorage.clickcount) {
  sessionStorage.clickcount = Number(sessionStorage.clickcount) + 1;
} else {
  sessionStorage.clickcount = 1;
}
document.getElementById("result").innerHTML = "You have clicked the button " +
sessionStorage.clickcount + " time(s) in this session.";



...................................................................................




past_calculations =[];

def add(a,b):
  return a+b;
  
def subtract(a,b):
  return a-b;
  
def multiply (a,b):
  return a*b;

def divide(a,b):
  try:
    return a/b
  except Exception as e:
    print(e)
def power(a,b):
  return a**b
  
def remainder(a,b):
  return a%b
  
def history():
  if past_calculations:
    for index,calc in enumerate(past_calculations):
        print(calc);
  else:
    print("No past calculations to show");
    return 0;
    
def select_op(choice):
  if (choice == '?'):
    return history() 
  if (choice == '#'):
    return -1
  elif (choice == '$'):
    return 0
  elif (choice in ('+','-','*','/','^','%')):
    while (True):
      num1s = str(input("Enter first number: "))
      print(num1s)
      if num1s.endswith('$'):
        return 0;
      if num1s.endswith('#'):
        return -1;
        
      try:
        num1 = float(num1s)
        break;
      except:
        print("Not a valid number,please enter again")
        continue
    
    while (True):
      num2s = str(input("Enter second number: "))
      print(num2s)
      if num2s.endswith('$'):
        return 0;
      if num2s.endswith('#'):
        return -1;
      try:  
        num2 = float(num2s)
        break
      except:
        print("Not a valid number,please enter again")
        continue
    
    result = 0.0
    last_calculation = ""
    if choice == '+':
      result = add(num1, num2);
    elif choice == '-':
      result = subtract(num1, num2);
    elif choice == '*':
      result = multiply(num1, num2);
    elif choice == '/':
      result =  divide(num1, num2);
    elif choice == '^':
      result = power(num1, num2);
    elif choice == '%':
      result = remainder(num1, num2);
    else:
      print("Something Went Wrong");  
      
    last_calculation =  "{0} {1} {2} = {3}".format(num1, choice, num2, result) 
    print(last_calculation )
    past_calculations.append(last_calculation);
  else:
    print("Unrecognized operation")
    
while True:
  print("Select operation.")
  print("1.Add      : + ")
  print("2.Subtract : - ")
  print("3.Multiply : * ")
  print("4.Divide   : / ")
  print("5.Power    : ^ ")
  print("6.Remainder: % ")
  print("7.Terminate: # ")
  print("8.Reset    : $ ")
  print("8.History  : ? ")
  
  # take input from the user
  choice = input("Enter choice(+,-,*,/,^,%,#,$,?): ")
  print(choice)
  if(select_op(choice) == -1):
    #program ends here
    print("Done. Terminating")
    exit()